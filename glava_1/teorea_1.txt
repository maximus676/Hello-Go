// Переменные
1) var имя_переменной тип_данных  (var hello string)
2) Если мы хотим сразу определить несколько переменных и присвоить им начальные значения
var (
        name string = "Tom"
        age int = 27
    )

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 //Типы данных Урок 2
1)Целочисленные типы представляют целые числа
int8:  от -128 до 127 и занимает в памяти 1 байт (8 бит)
int16:  от -32768 до 32767 и занимает в памяти 2 байта (16 бит)
int32:  от -2147483648 до 2147483647 и занимает 4 байта (32 бита)
int64:  от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт (64 бита)
без отрицательных значений начинаются на u
uint8:  от 0 до 255 и занимает 1 байт
uint16:  от 0 до 65535 и занимает 2 байта
uint32:  от 0 до 4294967295 и занимает 4 байта
uint64:  от 0 до 18 446 744 073 709 551 615 и занимает 8 байт
byte: синоним типа uint8,  от 0 до 255 и занимает 1 байт
rune: синоним типа int32,  от -2147483648 до 2147483647 и занимает 4 байта
int:  со знаком, которое в зависимости о платформы может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо int32, либо int64.
uint: представляет целое беззнаковое число только без знака, которое, аналогично типу int, в зависимости о платформы может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо uint32, либо uint64.

2) Числа с плавающей точкой
float32 - от 1.4*10в-45 до 3.4*10в38 4 байта (32 бита)
float64 - от 4.9*10в-324 до 1.8*10в308
3) Присваивание значения переменной ( := )   age := 21  (красткая запись переменной)
4) для конвертирования типа данных числовых из одного в другой можно использовать функцию int64() к примеру 
func main() {
	var d int8 = 2
    var m int64 = int64(d)
}
5)var isAlive bool = true
6) В стринге можно использовать следующие символы 
\n: переход на новую строку
\r: возврат каретки
\t: табуляция
\": двойная кавычка внутри строк
\\: обратный слеш
7)Пример переменных 
var name, age = "Tom", 27
Или
var (
        name = "Tom"
        age = 27
)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Константы
1) const d   (этоне допустимо) нужно задавать начальное значение 
const n int  (этоне допустимо) нужно задавать начальное значение 
2) В этом случае константа без значения полчит значение предыдущей константы
:const (
    a = 1
    b
    c
    d = 3
    f
)
fmt.Println(a, b, c, d, f)   // 1, 1, 1, 3, 3

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Арифметические операции
1)% Возвращает остаток от деления
var c int = 35 % 3      // 2 (35 - (3*11=33)  = 2)
2) инкремент и декремент как и в JS (x++) и (x--) 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Поразрядные операции Урок 3
1)Операции сдвига
<<  -  Сдвигает запячтую числа (разряд) в право   var b int = 2 << 2;           // на два разрядов влево = 1000 -в десятичной системе равно число 8.
>> - Сдвигает запячтую числа (разряд) в право     var c int = 16 >> 3;          // 16 в десятичной 10000 на три разряда вправо = 10 - что в десятичной системе представляет число 2
Пример разбора числа в десятичной системе 
число 5 в  счисления записывается как 0101 (00000101), где
0 × 2^3=0
1 × 2^2=4
0 × 2^1=0
1 × 2^0=1
Сумма этих значений:  0+4+0+1=5.
Если взять число со знаком (-) это уже int8:  от -128 до 127 и последний ноль определяет знак таким образом -5 это (10000101) так как числа 2^7 степени не входят в 127
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Массивы  Урок 4
var numbers [число_элементов]тип_элементов	
var numbers [5]int = [5]int{1,2,3,4,5}
var numbers [5]int = [5]int{1,2}   // [1 2 0 0 0]
1) Если в число_элементов задать "..." то длина массива определяется, исходя из количества переданных ему элементов
var numbers = [...]int{1,2,3,4,5}   // длина массива 5
2)Длинна масива является частью его типа  (int) по этому два массив с разным колчичесвтом "число_элементов" сравнивать нельзя 
3)var r [4]int = [4]int{1, 1, 2, 4}
	// r = [5]int{1, 4, 5, 6, 6}  будет ошибка из за разности типов 
	r = [4]int{1, 4, 5, 6} так можно так как длинна и тип совпадают 
4) для обращения к элементу масива используем ингдекс в квадратных скобках
var numbers [5]int = [5]int{1,2,3,4,5}
    fmt.Println(numbers[0])     // 1
    fmt.Println(numbers[4])     // 5
    numbers[0] = 87
    fmt.Println(numbers[0])     // 87
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
Условные конструкции Урок 5 
1) Конструкция условия 
if a > b {
		fmt.Println("NO")
	} else if a == b {
		fmt.Println("====")
	} else {
		fmt.Println("YES")
	}
2) Конструкция switch 
var c int = 6
	switch c + 2 {
	case 7:
		fmt.Println("c = 7")
	case 8:
		fmt.Println("c = 8")
	case 6, 5, 4: 
        fmt.Println("c = 6 или 5 или 4, но это не точно")
    default:
		fmt.Println("значение переменной c не определено")    
	} 

