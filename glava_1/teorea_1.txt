// Переменные
1) var имя_переменной тип_данных  (var hello string)
2) Если мы хотим сразу определить несколько переменных и присвоить им начальные значения
var (
        name string = "Tom"
        age int = 27
    )

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 //Типы данных Урок 2
1)Целочисленные типы представляют целые числа
int8:  от -128 до 127 и занимает в памяти 1 байт (8 бит)
int16:  от -32768 до 32767 и занимает в памяти 2 байта (16 бит)
int32:  от -2147483648 до 2147483647 и занимает 4 байта (32 бита)
int64:  от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт (64 бита)
без отрицательных значений начинаются на u
uint8:  от 0 до 255 и занимает 1 байт
uint16:  от 0 до 65535 и занимает 2 байта
uint32:  от 0 до 4294967295 и занимает 4 байта
uint64:  от 0 до 18 446 744 073 709 551 615 и занимает 8 байт
byte: синоним типа uint8,  от 0 до 255 и занимает 1 байт
rune: синоним типа int32,  от -2147483648 до 2147483647 и занимает 4 байта
int:  со знаком, которое в зависимости о платформы может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо int32, либо int64.
uint: представляет целое беззнаковое число только без знака, которое, аналогично типу int, в зависимости о платформы может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо uint32, либо uint64.

2) Числа с плавающей точкой
float32 - от 1.4*10в-45 до 3.4*10в38 4 байта (32 бита)
float64 - от 4.9*10в-324 до 1.8*10в308
3) Присваивание значения переменной ( := )   age := 21  (красткая запись переменной)
4) для конвертирования типа данных числовых из одного в другой можно использовать функцию int64() к примеру 
func main() {
	var d int8 = 2
    var m int64 = int64(d)
}
5)var isAlive bool = true
6) В стринге можно использовать следующие символы 
\n: переход на новую строку
\r: возврат каретки
\t: табуляция
\": двойная кавычка внутри строк
\\: обратный слеш
7)Пример переменных 
var name, age = "Tom", 27
Или
var (
        name = "Tom"
        age = 27
)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Константы
1) const d   (этоне допустимо) нужно задавать начальное значение 
const n int  (этоне допустимо) нужно задавать начальное значение 
2) В этом случае константа без значения полчит значение предыдущей константы
:const (
    a = 1
    b
    c
    d = 3
    f
)
fmt.Println(a, b, c, d, f)   // 1, 1, 1, 3, 3

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Арифметические операции
1)% Возвращает остаток от деления
var c int = 35 % 3      // 2 (35 - (3*11=33)  = 2)
2) инкремент и декремент как и в JS (x++) и (x--) 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Поразрядные операции Урок 3
1)Операции сдвига
<<  -  Сдвигает запячтую числа (разряд) в право   var b int = 2 << 2;           // на два разрядов влево = 1000 -в десятичной системе равно число 8.
>> - Сдвигает запячтую числа (разряд) в право     var c int = 16 >> 3;          // 16 в десятичной 10000 на три разряда вправо = 10 - что в десятичной системе представляет число 2
Пример разбора числа в десятичной системе 
число 5 в  счисления записывается как 0101 (00000101), где
0 × 2^3=0
1 × 2^2=4
0 × 2^1=0
1 × 2^0=1
Сумма этих значений:  0+4+0+1=5.
Если взять число со знаком (-) это уже int8:  от -128 до 127 и последний ноль определяет знак таким образом -5 это (10000101) так как числа 2^7 степени не входят в 127
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Массивы  Урок 4
var numbers [число_элементов]тип_элементов	
var numbers [5]int = [5]int{1,2,3,4,5}
var numbers [5]int = [5]int{1,2}   // [1 2 0 0 0]
1) Если в число_элементов задать "..." то длина массива определяется, исходя из количества переданных ему элементов
var numbers = [...]int{1,2,3,4,5}   // длина массива 5
2)Длинна масива является частью его типа  (int) по этому два массив с разным колчичесвтом "число_элементов" сравнивать нельзя 
3)var r [4]int = [4]int{1, 1, 2, 4}
	// r = [5]int{1, 4, 5, 6, 6}  будет ошибка из за разности типов 
	r = [4]int{1, 4, 5, 6} так можно так как длинна и тип совпадают 
4) для обращения к элементу масива используем ингдекс в квадратных скобках
var numbers [5]int = [5]int{1,2,3,4,5}
    fmt.Println(numbers[0])     // 1
    fmt.Println(numbers[4])     // 5
    numbers[0] = 87
    fmt.Println(numbers[0])     // 87
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
Условные конструкции Урок 5 
1) Конструкция условия 
if a > b {
		fmt.Println("NO")
	} else if a == b {
		fmt.Println("====")
	} else {
		fmt.Println("YES")
	}
2) Конструкция switch 
var c int = 6
	switch c + 2 {
	case 7:
		fmt.Println("c = 7")
	case 8:
		fmt.Println("c = 8")
	case 6, 5, 4: 
        fmt.Println("c = 6 или 5 или 4, но это не точно")
    default:
		fmt.Println("значение переменной c не определено")    
	} 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
ЦИкл  УРОК 6 
1) Структура цикла 
for [инициализация счетчика]; [условие]; [изменение счетчика]{
    // действия
}
 for i := 1; i < 10; i++{
        fmt.Println(i * i)
    }
2) Для перебора массивов можно использовать следующую форму цикла for:

var users = [3]string{"Tom", "Alice", "Kate"}
for index, value := range users{
    fmt.Println(index, value)
}
Консольный вывод:
0 Tom
1 Alice
2 Kate
Альтернатива запись через привычный масив 
var names = [3]string{"Tom", "Alice", "Kate"}
for g := 0; g < len(names); g++ {
	fmt.Println(fmt.Sprint(g) + " " + names[g])
}
3) Операторы break и continue
break - полностью осуществляет выход из цикла:
continue - позволяет пропустить проход цикла и пойти цикл со следующего значения 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
Функции и их параметры  УРОК 7 
1)Структура функции 
func имя_функции (список_параметров) (типы_возвращаемых_значений){
    выполняемые_операторы
}
2) При передачи переменных в другую функцию мы передаём ее копию и можем в саомй функции назвать ее уже по другому. И при изменении копии переменной оригинальная переменная не меняется 
ПРИМЕР 
func main() {
    var v int = 30
	fmt.Println("v before: ", v) // 30 
	increment(v)
	fmt.Println("v after: ", v)  // 30   //значение переменной V никак не изменилось. Потому что при вызове функции передается копия значения переменной. 
}

func increment(x int) {
	fmt.Println("x before: ", x)  // 30 
	x = x + 20
	fmt.Println("x after: ", x)  // 50 
}
3)Неопределенное количество параметров
 Функция в пропсах может получать не ограниченое количесво элементов (одного типа)
 func add(numbers ...int){ }
вызов функции add(5, 6, 7, 2, 3)
После берем в функции add через цикл как при работе с массивом берем длинну количества переменных и пробегаемся по ним циклом сумируя 

4)Для передачи массива в функцию нужюно 

var lor [5]int = [5]int{5, 6, 7, 2, 3}
var lor2 [4]int = [4]int{1, 2, 3, 4}
var lor3 []int = []int{5, 6, 7, 2, 3} // Если нет жёского количества динны массива то пеерводить в срез не нужно  "[:]"
add2(lor[:])                          // sum = 15  Таким образом можно передать массив нужно указывать "[:]" приобразоывая  массив в срез так акак у массива может быть разная длинна и эторазные типы
add2(lor2[:])                         // sum = 10  lor2[:]
add2(lor3)                            // sum =  23   // не нужен  "[:]" так как нет жёского типа с длинной массива []int
add2([]int{5, 6, 5, 7, 3})            // sum = 26

Пример как массив принимает функция 
func add2(props []int) { }
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
Возвращение результата из функции  УРОК 8 
1)Структура функции с return
 func имя_функции (список_параметров) тип_возвращаемого_значения {
    выполняемые_операторы
    return возвращаемое_значение
}
2) Именованные возвращаемые результаты
можно указать сразу что я хочу вернуть в тип_возвращаемого_значения и не прописывать в return и написать в конце просто return
Пример
func add2(x, y int) (z int) { }

3)Возвращение нескольких значений
всё примерно тоже самое 
var age, name = add(4, 5, "Tom", "Simpson")
сама функция 
func add3(x, y int, firstName, lastName string) (z int, full string) {
	return z, full
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
Тип функции  УРОК 9 - 10 - 11
1)func add(x int, y int) int{
    return x + y
} 
данная функция имеет след тип  func(int, int) int   -  входящие и выходящие параметры int
2) можно присвоить функцию переменно 
func add(x int, y int) int{
    return x + y
}
 
func main() {
    var f func(int, int) int = add
}
3) функция которая принемает функции похожего типра УРОК 10
func action(x int, y int, operation func(int, int) int) {  // func(int, int) int - этот тип operation - название переменной как x или y
	fmt.Println(result)
}
4) Функция как результат другой функции УРОК 11
Функция также может возвращаться из другой функции в качестве результата:
ПРИМЕР 
func selectFn(n int) (func(int, int) int){   }    //ФУНКЦИЯ ВЕРНЕТ (func(int, int) int) 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
Анонимные функции  УРОК 12
1) Анонимные функции - Они отличаются от обычных функций также тем, что они могут определяться внутри других функций и также могут иметь доступ к контексту выполнения.
f := func(x, y int) int{ return x + y}
2) ТАк же может выступать как Анонимная функция как аргумент функции
action(10, 25, func (x int, y int) int { return x + y }) 
3)Так же может выступать как Анонимная функция как результат функции
func selectFn(n int) (func(int, int) int){
    if n==1 {
        }
}    
4) Доступ к окружению - Преимуществом анонимных функций является то, что они имеют доступ к окружению, в котором они определяются.  ???? пояснить 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
Рекурсивные функции   УРОК 13
Рекурсивная функция представляет такую функцию, которая вызывает саму себя  
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
defer и panic УРОК 14
1)defer - позволяет выполнить определенную функцию в конце программы
2)Верхний defer выполнится последним так как при пробегании по пкоду встретился первым 

3) panic - позволяет сгенерировать ошибку и выйти из программы:
4) Как толкьо сработает оператор panic всё все проходки останавливаются и в консоли выскакивает ошибка которую указали в panic 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
Срезы УРОК 15
1) Это как массив но у него нет жёсткого ограничения по длинне 
var users []string  - срез и в скобках линну не нужно указывать 
users2 := []string{"Tom", "Alice", "Kate"} котороткая запись 

Добавление в срез
2) Добавление элемента в срез происходит при помощи функции append    append(slice, value)

Оператор среза
3) s[i:j] - делает новый срез, который содержит элементы последовательности s с i по j-1
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
Отображения УРОК 16
1) Отображение определяется как объект типа map[K]V, -  где К представляет тип ключа, а V - тип значения
2)var test map[string]int // Ключи представляют тип string, значения - тип int
3) Для проверки наличия элемента по определенному ключу можно применять выражение if:
4) Функция make представляет альтернативный вариант создания объекта. Она создает пустую хеш-таблицу:
5)Добавление и удаление элементов
для добавления можно просто написать ключ знгачение  (или таким образом перезаписать уже существующеее значение ключа)
	people["Max"] = 222 
для удаления применяется встроенная функция delete(map, key),
	delete(people, "Alice")