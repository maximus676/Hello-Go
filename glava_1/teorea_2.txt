============================================================================
УРОК 17
Ошибка через  встроенный интерфейс error  УРОК 17
1) Пример при проверке 
if number < 0 {
		return 0, errors.New("число должно быть положительным")
	}
	return number, nil // nil, указывая на отсутствие ошибки
}

============================================================================
УРОК 18 
2)Горутины (goroutines) — это ключевая особенность языка программирования Go, которая обеспечивает легковесную конкурентность. 
Они позволяют выполнять функции одновременно с другими функциями, работая в том же адресном пространстве. Пример УРОК 18 

Так же можно задать тоймаут и используется для того, чтобы дать горутине время выполниться. 
В реальных приложениях обычно используются более изящные методы синхронизации, такие как каналы или sync.WaitGroup.

Задержка: time.Sleep(1 * time.Second)   -  задержка на 1 секунду 
============================================================================
УРОК 19 strconv
В Go стандартная библиотека strconv предоставляет функции для преобразования строк в базовые типы данных и обратно.

1)Преобразование строк в числа:
Atoi(s string) (int, error): Преобразует строку в целое число (int).
ParseInt(s string, base int, bitSize int) (i int64, err error): Преобразует строку в целое число с указанным основанием и размером.
ParseFloat(s string, bitSize int) (float64, error): Преобразует строку в число с плавающей точкой (float64).

2)Преобразование чисел в строки:
Itoa(i int) string: Преобразует целое число (int) в строку.
FormatInt(i int64, base int) string: Преобразует целое число в строку с указанным основанием.
FormatFloat(f float64, fmt byte, prec, bitSize int) string: Преобразует число с плавающей точкой в строку с заданным форматом и точностью.

3)Преобразование строк в булевы значения:
ParseBool(str string) (bool, error): Преобразует строку в булево значение (bool).

4)Преобразование булевых значений в строки:
FormatBool(b bool) string: Преобразует булево значение в строку.
============================================================================
Урок 20
Логические типы 
1) && (и)
== (равно)
|| (или)
! (не)
!= (не равно)
Строки 
2) Строки Для слияния строки с переменной нужно использовать fmt.Sprintf():  и для передачи переменнолй используется структура %s",
3) Узнать длину строки можно с помощью встроенной функции len()     \\ будьте внимательны! Функция считает кол-во байт, а не кол-во символов
4)Для работы со строками часто используется стандартная библиотека strings. В данном задании вам понадобятся следующие функции:

// обрезает символы, переданные вторым аргументом, с обеих сторон строки
strings.Trim(s, cutset string) string
strings.Trim(" hello ", " ") // "hello"  // срежит все пробелы что с лева что справо от строки или можно подставить символ или букву которую нужно убрать

// преобразует все буквы в строке в нижний регистр
strings.ToLower(s string) string
strings.ToLower("пРиВеТ") // "привет"

// озаглавливает первую букву в каждом слове в строке
strings.Title(s string) string
strings.Title("привет, джон") // "Привет, Джон"
============================================================================
Урок 21
1) Функция HasPrefix используется для проверки, начинается ли строка с указанного префикса
   strings.HasPrefix(name, "A")   -  если начинается name с "A"  